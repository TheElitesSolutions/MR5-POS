{
  "permissions": {
    "allow": [
      "Bash(done)",
      "Bash(yarn build)",
      "Bash(tee:*)",
      "Bash(dir \"C:\\Users\\TheElitesSolutions\\Desktop\\mr5-POS\\src\\main\\services\")",
      "Bash(dir \"C:\\Users\\TheElitesSolutions\\Documents\\Clients\\MR5-POS-v2\\main\\services\")",
      "Read(//c/Users/TheElitesSolutions/Desktop/mr5-POS/src/main/services/**)",
      "Bash(dir \"C:\\Users\\TheElitesSolutions\\Desktop\\mr5-POS\\src\\main\\errors\")",
      "Bash(dir \"C:\\Users\\TheElitesSolutions\\Documents\\Clients\\MR5-POS-v2\\main\\errors\")",
      "Bash(dir \"C:\\Users\\TheElitesSolutions\\Desktop\\mr5-POS\\src\\shared\\validation\")",
      "Bash(dir \"C:\\Users\\TheElitesSolutions\\Documents\\Clients\\MR5-POS-v2\\shared\\validation\")",
      "Read(//c/Users/TheElitesSolutions/Desktop/mr5-POS/src/main/**)",
      "Bash(yarn add:*)",
      "Bash(find:*)",
      "Bash(npx asar list:*)",
      "Read(//c/Users/TheElitesSolutions/Desktop/mr5-POS/**)",
      "Bash(cmd //c:*)",
      "Bash(tasklist)",
      "Bash(awk:*)",
      "Bash(rm:*)",
      "Bash(lsof:*)",
      "Bash(mv:*)",
      "Bash(mkdir:*)",
      "Bash(npx asar extract:*)",
      "Bash(cat:*)",
      "Bash(xargs:*)",
      "Bash(taskkill:*)",
      "Bash(npx electron:*)",
      "Bash(findstr:*)",
      "Bash(sqlite3:*)",
      "Bash(node:*)",
      "Bash(dir:*)",
      "Bash(powershell -Command \"& {Get-Content ''C:\\Users\\TheElitesSolutions\\AppData\\Roaming\\my-nextron-app\\mr5-pos.db'' -Encoding Byte | Select-Object -First 100 | ForEach-Object {''{0:X2}'' -f $_ | Out-String}\")",
      "Bash(powershell:*)",
      "Bash(start \"\" \"dist/win-unpacked/MR5 POS.exe\")",
      "Bash(ls:*)",
      "Read(//c/Users/TheElitesSolutions/AppData/Roaming/my-nextron-app (development)/**)",
      "Bash(npx tsc:*)",
      "Bash(yarn test --maxWorkers=2 --testPathPattern=\"addon\")",
      "Bash(yarn test --maxWorkers=2 tests/backend/addon.test.ts)",
      "Bash(yarn test --maxWorkers=2)",
      "Bash(yarn test tests/backend/expense.test.ts --maxWorkers=1)",
      "Bash(yarn test tests/backend/inventory.test.ts --maxWorkers=1)",
      "Bash(yarn test tests/backend/payment.test.ts --maxWorkers=1)",
      "Bash(yarn test)",
      "Bash(yarn test tests/frontend/menu-flow.test.tsx --maxWorkers=1)",
      "Bash(yarn test tests/e2e/menu-flow-e2e.test.ts --maxWorkers=1)",
      "Bash(npm rebuild better-sqlite3 --runtime=electron --target=22.0.0 --disturl=https://electronjs.org/headers --build-from-source)",
      "Bash(yarn dev)",
      "Bash(netstat -ano)",
      "Bash(yarn list --pattern @supabase/supabase-js)",
      "Bash(yarn list --pattern @supabase/supabase-js --depth=0)",
      "Bash(git add electron-builder.yml package.json)",
      "Bash(git commit -m \"Configure auto-update system with GitHub repository details\n\n- Updated electron-builder.yml with TheElitesSolutions/MR5-POS repository\n- Updated package.json repository URL\n- Auto-update system now ready for production use\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git tag -a v1.0.1 -m \"Release v1.0.1 - Auto-update system test\n\nFeatures:\n- Complete auto-update system implementation\n- Data safety with pre-update backups\n- Post-update integrity verification\n- Automatic crash detection and rollback\n- GitHub Releases integration\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\")",
      "Bash(git push origin main)",
      "Bash(git push origin v1.0.1)",
      "Bash(gh run list --limit 5)",
      "Bash(yarn install --frozen-lockfile)",
      "Bash(set GH_TOKEN=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)",
      "Bash(yarn build:release)",
      "Bash(timeout /t 30)",
      "Bash(gh release create v1.0.1 dist/\"MR5 POS Setup 1.0.1.exe\" dist/\"MR5 POS Setup 1.0.1.exe.blockmap\" dist/latest.yml --title \"v1.0.1\" --notes \"Release v1.0.1 - Auto-update system test\n\nFeatures:\n- Complete auto-update system implementation\n- Data safety with pre-update backups\n- Post-update integrity verification\n- Automatic crash detection and rollback\n- GitHub Releases integration\")",
      "Bash(gh auth login --with-token)",
      "Bash(gh release create v1.0.1 \"dist/MR5 POS Setup 1.0.1.exe\" \"dist/MR5 POS Setup 1.0.1.exe.blockmap\" \"dist/latest.yml\" --title \"v1.0.1\" --notes \"Release v1.0.1 - Auto-update system test\n\nFeatures:\n- Complete auto-update system implementation\n- Data safety with pre-update backups\n- Post-update integrity verification\n- Automatic crash detection and rollback\n- GitHub Releases integration\")",
      "Read(//c/Users/TheElitesSolutions/AppData/Roaming/my-nextron-app/**)",
      "Bash(timeout /t 5)",
      "Read(//c/Users/TheElitesSolutions/AppData/Roaming/**)",
      "Bash(rg -o \"\\bgap-\\d+\\b\" --no-filename)",
      "Bash(rg -o \"\\btext-(xs|sm|base|lg|xl|2xl|3xl|4xl|5xl|6xl|7xl|8xl|9xl)\\b\" --no-filename)",
      "Bash(rg -o \"\\bspace-[xy]-\\d+\\b\" --no-filename)",
      "Bash(rg -o \"\\b(px|py|pt|pb|pl|pr)-\\d+\\b\" --no-filename)",
      "Bash(rg -o \"\\b(mx|my|mt|mb|ml|mr)-\\d+\\b\" --no-filename)",
      "Bash(rg -o \"\\bfont-(thin|extralight|light|normal|medium|semibold|bold|extrabold|black)\\b\" --no-filename)",
      "Bash(rg \"(p|m|gap|space)-\\[\\d+px\\]\" --no-filename -o)",
      "Bash(rg \"text-\\[\\d+px\\]\" --no-filename -o)",
      "Bash(rg -o \"\\bp-\\d+\\.5\\b\" --no-filename)",
      "Bash(rg -o \"\\bgap-\\d+\\.5\\b\" --no-filename)",
      "Bash(rg -o \"\\b(p|m|gap|space)-[0-9]+\\.[0-9]+\\b\" --no-filename)",
      "Bash(rg -o \"\\b(px|py|pt|pb|pl|pr|mx|my|mt|mb|ml|mr)-[0-9]+\\.[0-9]+\\b\" --no-filename)",
      "Bash(wc -l \"C:\\Users\\TheElitesSolutions\\Documents\\Clients\\MR5-POS-v2\\renderer\\app\\(auth)\\dashboard\\page.tsx\")",
      "Bash(wc -l \"C:\\Users\\TheElitesSolutions\\Documents\\Clients\\MR5-POS-v2\\renderer\\app\\(auth)\\menu\\page.tsx\")",
      "Bash(wc -l \"C:\\Users\\TheElitesSolutions\\Documents\\Clients\\MR5-POS-v2\\renderer\\app\\(auth)\\stock\\page.tsx\")",
      "Bash(rg -o \"\\bgap-[0-9]+\" --no-filename)",
      "Bash(rg -o \"\\bspace-[xy]-[0-9]+\" --no-filename)",
      "Bash(rg -o \"\\bp-[0-9]+\" --no-filename)",
      "Bash(git add .)",
      "Bash(gh release upload v2.1.0 \"dist/MR5 POS Setup 2.1.0.exe\" \"dist/MR5 POS Setup 2.1.0.exe.blockmap\" \"dist/latest.yml\")",
      "Bash(gh release view v2.1.0 --json assets --jq '.assets[] | .name')",
      "Bash(gh release view v2.1.0 --json assets --jq '.assets[] | \"\"\\(.name) - \\(.url)\"\"')",
      "Bash(gh release delete-asset v2.1.0 latest.yml --yes)",
      "Bash(gh release upload v2.1.0 \"dist/latest.yml\")",
      "Bash(gh release view v2.1.0 --json assets,tagName,name,body --jq '{tag: .tagName, name: .name, assets: [.assets[].name]}')",
      "Bash(git add renderer/components/settings/UpdateSettings.tsx renderer/hooks/useUpdater.ts \"renderer/app/(auth)/settings/page.tsx\")",
      "Bash(git commit -m \"Add update checker UI to settings page\n\n- Created useUpdater hook for managing application updates\n- Added UpdateSettings component with full update workflow\n- Integrated Updates tab into settings page\n- Features:\n  - Check for updates manually\n  - Download updates with progress tracking\n  - Install updates and restart\n  - Skip versions\n  - Automatic backup before updates\n  - Error handling and user feedback\n- UI shows current version, update availability, download progress\n- Supports development mode detection\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add renderer/hooks/useUpdater.ts renderer/components/settings/UpdateSettings.tsx)",
      "Bash(git commit -m \"Fix TypeError in update checker - add null safety checks\n\n- Fixed error.message undefined error in useUpdater hook\n- Added safe error handling for error events\n- Added null coalescing operators for status data\n- Fixed getIsDev function handling\n- Added safety checks for all update operation results\n- Improved error messages with fallbacks\n\nFixes: TypeError: Cannot read properties of undefined (reading ''message'')\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add renderer/hooks/useUpdater.ts)",
      "Bash(git commit -m \"Add console logging to debug update checker errors\n\n- Added detailed console.log and console.error statements\n- Logs error events, responses, and processed messages\n- Will help identify the root cause of ''unknown error''\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add main/controllers/updaterController.ts)",
      "Bash(git commit -m \"Add GitHub token support for private repository updates\n\n- Added setFeedURL configuration with GH_TOKEN support\n- Auto-updater now works with private GitHub repositories\n- Falls back to public repository mode if no token found\n- Token read from GH_TOKEN environment variable\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add test-update-system.js UPDATE_SYSTEM_SETUP.md)",
      "Bash(git commit -m \"Add comprehensive test script and setup guide for auto-update system\n\n- Created test-update-system.js with 6 automated tests\n- Tests GitHub access, releases, assets, latest.yml, config\n- Added UPDATE_SYSTEM_SETUP.md with step-by-step guide\n- Includes troubleshooting, monitoring, and production checklist\n- All tests passing with public repository\n\nTest Results:\nâœ“ GitHub Access: PASS\nâœ“ Latest Release: PASS  \nâœ“ Release Assets: PASS\nâœ“ latest.yml Content: PASS\nâœ“ Builder Config: PASS\nâœ“ Package Version: PASS\n\n6/6 tests passed - Auto-update system ready!\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git add QUICK_TEST_GUIDE.md)",
      "Bash(git commit -m \"Add quick test guide for auto-update system\")",
      "Bash(timeout /t 3)"
    ],
    "deny": [],
    "ask": []
  }
}
